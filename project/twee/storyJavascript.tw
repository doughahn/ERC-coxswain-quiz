:: StoryJavascript [script]

Macro.add('questionMacro', {
    handler: function () {
        if (this.args.length < 3) {
            return this.error('Incorrect number of arguments. Expected at least 3: question, options, correct answer.');
        }
        
        var question = this.args[0];
        var options = this.args[1].map(opt => opt.trim());
        var correctAnswer = this.args[2].trim();

        // Escape single quotes in the correct answer
        var escapedCorrectAnswer = correctAnswer.replace(/'/g, "\\'");

        // Generate the question
        var output = '<fieldset><legend>' + question + '</legend>';
        
        // Generate the options with onchange event to automatically check answer
        for (let i = 0; i < options.length; i++) {
            output += `<label><input type="radio" name="questionOption" value="${options[i]}" onchange="window.checkAnswer('${escapedCorrectAnswer}')"><span class="radio-custom"></span> <span>${options[i]}</span></label>`;
        }

        output += '</fieldset>';
        
        // Correct feedback div
        output += '<div class="correctFeedback hidden"><h3>Well done! Correct!</h3></div>';

        // Render the output using SugarCube's wiki method
        $(this.output).wiki(output);
    }
});



// JS Logic
window.checkAnswer = function(correctAnswer) {
    console.log("correctAnswer:", correctAnswer);  // Log the value
    if (typeof correctAnswer !== 'string') {
        console.error("The correct answer is not a string.");
        return;
    }
    
    var selectedElement = jQuery('input[name="questionOption"]:checked');
    
    if (!selectedElement.length) {
        console.error("No radio button was selected.");
        return;
    }

    var selectedValue = selectedElement.val();  // <-- Removed .trim() here

    jQuery('input[name="questionOption"]').prop('disabled', true);
    
    if (selectedValue !== correctAnswer) {  // <-- No need to trim correctAnswer here, since it was already trimmed in the macro.
        jQuery('.incorrectFeedback').removeClass('hidden');
        window.deductPoints(1);  // Deducts 1 point
    } else {
        jQuery('.correctFeedback').removeClass('hidden');
    }

    jQuery('.nextButton').removeClass('hidden');
}




window.deductPoints = function(pointsToDeduct) {
    State.variables.score -= pointsToDeduct;

    // Ensure score doesn't go below 0
    if (State.variables.score < 0) {
        State.variables.score = 0;
    }
}

Macro.add('setupQuestion', {
    handler: function() {
        let droppableCount = parseInt(this.args[0], 10);
        let draggableItems = this.args[1].split(',');
        let correctOrder = this.args[2].split(',');

        let containerHTML = '<div class="dragdrop-container">';
        
        let droppableHTML = '<div id="droppables">';
        for(let i = 1; i <= droppableCount; i++) {
            droppableHTML += `<div class="droppable empty" data-label="${i}" id="slot${i}"></div>`;
        }
        droppableHTML += '</div>';
        
        let draggableHTML = '<div id="draggables">';
        for(let i = 0; i < draggableItems.length; i++) {
            draggableHTML += `<div class="draggable" id="item${i+1}"><p>${draggableItems[i].trim()}</p></div>`;
        }
        draggableHTML += '</div>';

        let controlsHTML = `
            <button id="submitOrder" disabled>Submit</button>
            <button id="resetOrder">Reset</button>
            <div class="correctFeedback hidden"><h3>Correct order!</h3></div>
        `;

        containerHTML += droppableHTML + draggableHTML + controlsHTML + '</div>';

        State.variables.correctOrder = correctOrder;
        $(this.output).append(containerHTML);
        
        initializeDragAndDrop();
    }
});

function initializeDragAndDrop() {
    let selectedElement = null;
    let initialTouch = { x: 0, y: 0 };
    let initialElementPos = { x: 0, y: 0 };
    
    function getDropTarget(clientX, clientY) {
        // Get element at current pointer position
        const element = document.elementFromPoint(clientX, clientY);
        if (!element) return null;
        
        // Return the closest droppable parent
        return $(element).closest('.droppable');
    }

    function swapElements($draggedEl, $dropTarget) {
        const $draggedParent = $draggedEl.parent();
        const $existingDraggable = $dropTarget.children('.draggable').first();
        
        if ($existingDraggable.length) {
            if ($draggedParent.hasClass('droppable')) {
                $draggedEl.detach();
                $existingDraggable.detach();
                $draggedParent.append($existingDraggable);
                $dropTarget.append($draggedEl);
            } else {
                $existingDraggable.detach().appendTo('#draggables');
                $draggedEl.detach().appendTo($dropTarget);
            }
        } else {
            $draggedEl.detach().appendTo($dropTarget);
            if ($draggedParent.hasClass('droppable')) {
                $draggedParent.addClass('empty');
            }
        }
        
        $dropTarget.removeClass('empty');
        updateSubmitButton();
    }

    function moveElement(clientX, clientY) {
        if (!selectedElement) return;

        const deltaX = clientX - initialTouch.x;
        const deltaY = clientY - initialTouch.y;

        const newX = initialElementPos.x + deltaX;
        const newY = initialElementPos.y + deltaY;

        selectedElement.css({
            position: 'fixed',
            left: clientX - (selectedElement.width() / 2) + 'px',
            top: clientY - (selectedElement.height() / 2) + 'px'
        });
    }

    function handleStart(e) {
        const touch = e.type.includes('touch') ? e.originalEvent.touches[0] : e;
        selectedElement = $(this);

        // Store initial touch position
        initialTouch.x = touch.clientX;
        initialTouch.y = touch.clientY;

        // Store initial element position
        const rect = this.getBoundingClientRect();
        initialElementPos.x = rect.left;
        initialElementPos.y = rect.top;

        selectedElement
            .addClass('dragging')
            .css({
                position: 'fixed',
                zIndex: 1000,
                width: $(this).width() + 'px',
                left: touch.clientX - (selectedElement.width() / 2) + 'px',
                top: touch.clientY - (selectedElement.height() / 2) + 'px'
            });
    }

    function handleMove(e) {
        if (!selectedElement) return;
        e.preventDefault();

        const touch = e.type.includes('touch') ? e.originalEvent.touches[0] : e;
        moveElement(touch.clientX, touch.clientY);

        const dropTarget = getDropTarget(touch.clientX, touch.clientY);
        $('.droppable').removeClass('drag-over');
        if (dropTarget && dropTarget.length) {
            dropTarget.addClass('drag-over');
        }
    }

    function handleEnd(e) {
        if (!selectedElement) return;

        const touch = e.type.includes('touch') ? e.originalEvent.changedTouches[0] : e;
        const dropTarget = getDropTarget(touch.clientX, touch.clientY);

        selectedElement.removeClass('dragging').css({
            position: '',
            left: '',
            top: '',
            zIndex: '',
            width: ''
        });

        if (dropTarget && dropTarget.length) {
            swapElements(selectedElement, dropTarget);
        } else {
            // If not dropped on a valid target, return to original container
            selectedElement.detach().appendTo('#draggables');
        }

        $('.droppable').removeClass('drag-over');
        selectedElement = null;
    }

    function updateSubmitButton() {
        const allSlotsFilled = $('.droppable').toArray().every(slot => 
            $(slot).children('.draggable').length === 1
        );
        $('#submitOrder').prop('disabled', !allSlotsFilled);
    }

    // Remove any existing event listeners
    $('.draggable').off();

    // Add touch and mouse event listeners
    $('.draggable')
        .on('mousedown touchstart', handleStart)
        .on('click', function(e) { e.preventDefault(); });

    $(document)
        .on('mousemove touchmove', handleMove)
        .on('mouseup touchend', handleEnd);

    $('#submitOrder').on('click', function() {
        const correctOrder = State.variables.correctOrder;
        const currentOrder = $('.droppable').map(function() {
            return $(this).children('.draggable:first').attr('id');
        }).get();

        const isCorrect = correctOrder.every((id, index) => id === currentOrder[index]);

        if (isCorrect) {
            $('.correctFeedback').removeClass('hidden');
        } else {
            $('.incorrectFeedback').removeClass('hidden');
            State.variables.score -= 1;
        }

        $('.nextButton').removeClass('hidden');
        $(this).addClass('hidden');
    });

    $('#resetOrder').on('click', function() {
        $('.draggable').detach().appendTo('#draggables');
        $('.droppable').addClass('empty');
        $('.correctFeedback, .incorrectFeedback, .nextButton').addClass('hidden');
        $('#submitOrder').prop('disabled', true).removeClass('hidden');
    });
}

// Add necessary styles
$(document.head).append(`
    <style>
        .dragdrop-container {
            position: relative;
            width: 100%;
            margin: 0 auto;
        }

        .drag-over {
            border-color: var(--light-color) !important;
            background-color: rgba(127, 164, 188, 0.1) !important;
        }
        
        .dragging {
            opacity: 0.8;
            pointer-events: none;
            transform-origin: center center;
        }

        .droppable.empty {
            background-color: transparent;
        }

        .draggable {
            touch-action: none;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            cursor: move;
            background-color: #f4f4f4;
        }

        #draggables {
            min-height: 50px;
        }
    </style>
`);
$(document.head).append("<link rel='icon' href='assets/ERC_whale.png'>");