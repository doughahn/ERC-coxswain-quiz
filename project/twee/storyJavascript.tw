:: StoryJavascript [script]

Macro.add('questionMacro', {
    handler: function () {
        if (this.args.length < 3) {
            return this.error('Incorrect number of arguments. Expected at least 3: question, options, correct answer.');
        }
        
        var question = this.args[0];
        var options = this.args[1].map(opt => opt.trim());
        var correctAnswer = this.args[2].trim();

        // Escape single quotes in the correct answer
        var escapedCorrectAnswer = correctAnswer.replace(/'/g, "\\'");

        // Generate the question
        var output = '<fieldset><legend>' + question + '</legend>';
        
        // Generate the options with onchange event to automatically check answer
        for (let i = 0; i < options.length; i++) {
            output += `<label><input type="radio" name="questionOption" value="${options[i]}" onchange="window.checkAnswer('${escapedCorrectAnswer}')"><span class="radio-custom"></span> <span>${options[i]}</span></label>`;
        }

        output += '</fieldset>';
        
        // Correct feedback div
        output += '<div class="correctFeedback hidden"><h3>Well done! Correct!</h3></div>';

        // Render the output using SugarCube's wiki method
        $(this.output).wiki(output);
    }
});



// JS Logic
window.checkAnswer = function(correctAnswer) {
    console.log("correctAnswer:", correctAnswer);  // Log the value
    if (typeof correctAnswer !== 'string') {
        console.error("The correct answer is not a string.");
        return;
    }
    
    var selectedElement = jQuery('input[name="questionOption"]:checked');
    
    if (!selectedElement.length) {
        console.error("No radio button was selected.");
        return;
    }

    var selectedValue = selectedElement.val();  // <-- Removed .trim() here

    jQuery('input[name="questionOption"]').prop('disabled', true);
    
    if (selectedValue !== correctAnswer) {  // <-- No need to trim correctAnswer here, since it was already trimmed in the macro.
        jQuery('.incorrectFeedback').removeClass('hidden');
        window.deductPoints(1);  // Deducts 1 point
    } else {
        jQuery('.correctFeedback').removeClass('hidden');
    }

    jQuery('.nextButton').removeClass('hidden');
}




window.deductPoints = function(pointsToDeduct) {
    State.variables.score -= pointsToDeduct;

    // Ensure score doesn't go below 0
    if (State.variables.score < 0) {
        State.variables.score = 0;
    }
}

// First, ensure Sortable.js is loaded
$.getScript('https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js');

Macro.add('setupQuestion', {
    handler: function() {
        let droppableCount = parseInt(this.args[0], 10);
        let draggableItems = this.args[1].split(',');
        let correctOrder = this.args[2].split(',');

        let droppableHTML = '<div id="droppables">';
        for(let i = 1; i <= droppableCount; i++) {
            droppableHTML += `<div class="droppable empty" data-label="${i}" id="slot${i}"></div>`;
        }
        droppableHTML += '</div>';
        
        let draggableHTML = '<div id="draggables">';
        for(let i = 0; i < draggableItems.length; i++) {
            draggableHTML += `<div class="draggable" id="item${i+1}"><p>${draggableItems[i].trim()}</p></div>`;
        }
        draggableHTML += '</div>';

        let controlsHTML = `
            <button id="submitOrder" disabled>Submit</button>
            <button id="resetOrder">Reset</button>
            <div class="correctFeedback hidden"><h3>Correct order!</h3></div>
        `;

        State.variables.correctOrder = correctOrder;
        $(this.output).append(droppableHTML + draggableHTML + controlsHTML);
        
        // Initialize after a short delay to ensure elements are rendered
        setTimeout(() => {
            if (typeof Sortable !== 'undefined') {
                initializeSortable();
            } else {
                console.error('Sortable not loaded');
            }
        }, 100);
    }
});

function initializeSortable() {
    const sortableOptions = {
        group: {
            name: 'shared',
            pull: true,
            put: true
        },
        animation: 150,
        forceFallback: true,  // Force fallback for better mobile support
        fallbackOnBody: true,
        dragClass: 'dragging',
        onStart: function(evt) {
            const item = evt.item;
            $(item).addClass('dragging');
        },
        onEnd: function(evt) {
            const item = evt.item;
            $(item).removeClass('dragging');
            updateEmptyStates();
            updateSubmitButton();
        },
        // Handle movement manually to ensure proper node handling
        onMove: function(evt) {
            return evt.related.className.includes('droppable') || 
                   evt.related.className.includes('draggable') ||
                   evt.related.id === 'draggables';
        }
    };

    // Initialize source container
    new Sortable(document.getElementById('draggables'), {
        ...sortableOptions,
        removeCloneOnHide: true,
        sort: false
    });

    // Initialize drop zones
    document.querySelectorAll('.droppable').forEach(dropzone => {
        new Sortable(dropzone, {
            ...sortableOptions,
            sort: false,
            removeCloneOnHide: true,
            filter: '.occupied'
        });
    });

    // Button handlers
    $('#submitOrder').off('click').on('click', function() {
        const correctOrder = State.variables.correctOrder;
        const currentOrder = $('.droppable').map(function() {
            return $(this).children('.draggable:first').attr('id');
        }).get();

        const isCorrect = correctOrder.every((id, index) => id === currentOrder[index]);

        if (isCorrect) {
            $('.correctFeedback').removeClass('hidden');
        } else {
            $('.incorrectFeedback').removeClass('hidden');
            State.variables.score -= 1;
        }

        $('.nextButton').removeClass('hidden');
        $(this).addClass('hidden');
    });

    $('#resetOrder').off('click').on('click', function() {
        // Safely move elements back
        $('.draggable').each(function() {
            const el = $(this).detach();
            $('#draggables').append(el);
        });
        updateEmptyStates();
        $('.correctFeedback, .incorrectFeedback, .nextButton').addClass('hidden');
        $('#submitOrder').prop('disabled', true).removeClass('hidden');
    });
}

function updateEmptyStates() {
    $('.droppable').each(function() {
        $(this).toggleClass('empty', !$(this).children('.draggable').length);
    });
}

function updateSubmitButton() {
    const allSlotsFilled = $('.droppable').toArray().every(slot => 
        $(slot).children('.draggable').length === 1
    );
    $('#submitOrder').prop('disabled', !allSlotsFilled);
}

// Add necessary styles
$(document.head).append(`
    <style>
        .dragging {
            cursor: move;
            opacity: 0.5 !important;
            background: #f0f0f0;
        }

        .draggable {
            touch-action: none;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            cursor: move;
        }

        .sortable-fallback {
            opacity: 0.8;
            pointer-events: none;
        }

        .sortable-ghost {
            opacity: 0.4;
            background: #f0f0f0;
        }

        @media (hover: none) {
            .droppable {
                min-height: 44px;
                margin: 5px 0;
            }
            
            .draggable {
                margin: 5px 0;
            }
        }
    </style>
`);

$(document.head).append("<link rel='icon' href='assets/ERC_whale.png'>");