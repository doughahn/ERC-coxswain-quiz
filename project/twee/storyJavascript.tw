:: StoryJavascript [script]

Macro.add('questionMacro', {
    handler: function () {
        if (this.args.length < 3) {
            return this.error('Incorrect number of arguments. Expected at least 3: question, options, correct answer.');
        }
        
        var question = this.args[0];
        var options = this.args[1].map(opt => opt.trim());
        var correctAnswer = this.args[2].trim();

        // Escape single quotes in the correct answer
        var escapedCorrectAnswer = correctAnswer.replace(/'/g, "\\'");

        // Generate the question
        var output = '<fieldset><legend>' + question + '</legend>';
        
        // Generate the options with onchange event to automatically check answer
        for (let i = 0; i < options.length; i++) {
            output += `<label><input type="radio" name="questionOption" value="${options[i]}" onchange="window.checkAnswer('${escapedCorrectAnswer}')"><span class="radio-custom"></span> <span>${options[i]}</span></label>`;
        }

        output += '</fieldset>';
        
        // Correct feedback div
        output += '<div class="correctFeedback hidden"><h3>Well done! Correct!</h3></div>';

        // Render the output using SugarCube's wiki method
        $(this.output).wiki(output);
    }
});



// JS Logic
window.checkAnswer = function(correctAnswer) {
    console.log("correctAnswer:", correctAnswer);  // Log the value
    if (typeof correctAnswer !== 'string') {
        console.error("The correct answer is not a string.");
        return;
    }
    
    var selectedElement = jQuery('input[name="questionOption"]:checked');
    
    if (!selectedElement.length) {
        console.error("No radio button was selected.");
        return;
    }

    var selectedValue = selectedElement.val();  // <-- Removed .trim() here

    jQuery('input[name="questionOption"]').prop('disabled', true);
    
    if (selectedValue !== correctAnswer) {  // <-- No need to trim correctAnswer here, since it was already trimmed in the macro.
        jQuery('.incorrectFeedback').removeClass('hidden');
        window.deductPoints(1);  // Deducts 1 point
    } else {
        jQuery('.correctFeedback').removeClass('hidden');
    }

    jQuery('.nextButton').removeClass('hidden');
}




window.deductPoints = function(pointsToDeduct) {
    State.variables.score -= pointsToDeduct;

    // Ensure score doesn't go below 0
    if (State.variables.score < 0) {
        State.variables.score = 0;
    }
}

Macro.add('setupQuestion', {
    handler: function() {
        // First, load Sortable.js if it hasn't been loaded yet
        if (typeof Sortable === 'undefined') {
            $('head').append('<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>');
        }

        let droppableCount = parseInt(this.args[0], 10);
        let draggableItems = this.args[1].split(',');
        let correctOrder = this.args[2].split(',');

        let droppableHTML = '<div id="droppables" class="sortable-list">';
        for(let i = 1; i <= droppableCount; i++) {
            droppableHTML += `<div class="droppable empty" data-label="${i}" id="slot${i}"></div>`;
        }
        droppableHTML += '</div>';
        
        let draggableHTML = '<div id="draggables" class="sortable-list">';
        for(let i = 0; i < draggableItems.length; i++) {
            draggableHTML += `<div class="draggable" id="item${i+1}"><p>${draggableItems[i].trim()}</p></div>`;
        }
        draggableHTML += '</div>';

        let controlsHTML = `
            <button id="submitOrder" disabled>Submit</button>
            <button id="resetOrder">Reset</button>
            <div class="correctFeedback hidden"><h3>Correct order!</h3></div>
        `;

        State.variables.correctOrder = correctOrder;
        $(this.output).append(droppableHTML + draggableHTML + controlsHTML);
        
        // Initialize after a short delay to ensure Sortable.js is loaded
        setTimeout(initializeDragAndDrop, 100);
    }
});

function initializeDragAndDrop() {
    if (typeof Sortable === 'undefined') {
        console.error('Sortable.js not loaded yet');
        return;
    }

    // Initialize both containers as Sortable
    const droppables = document.getElementById('droppables');
    const draggables = document.getElementById('draggables');

    // Initialize the source list (draggables)
    new Sortable(draggables, {
        group: 'shared',
        animation: 150,
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        dragClass: 'sortable-drag',
        onStart: function(evt) {
            $(evt.item).addClass('dragging');
        },
        onEnd: function(evt) {
            $(evt.item).removeClass('dragging');
            updateEmptyStates();
            updateSubmitButton();
        }
    });

    // Initialize the target list (droppables)
    new Sortable(droppables, {
        group: 'shared',
        animation: 150,
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        dragClass: 'sortable-drag',
        onStart: function(evt) {
            $(evt.item).addClass('dragging');
        },
        onEnd: function(evt) {
            $(evt.item).removeClass('dragging');
            updateEmptyStates();
            updateSubmitButton();
        }
    });

    function updateEmptyStates() {
        $('.droppable').each(function() {
            $(this).toggleClass('empty', !$(this).children('.draggable').length);
        });
    }

    function updateSubmitButton() {
        const allSlotsFilled = $('.droppable').toArray().every(slot => 
            $(slot).children('.draggable').length === 1
        );
        $('#submitOrder').prop('disabled', !allSlotsFilled);
    }

    $('#submitOrder').on('click', function() {
        const correctOrder = State.variables.correctOrder;
        const currentOrder = $('.droppable .draggable').map(function() {
            return this.id;
        }).get();

        const isCorrect = correctOrder.every((id, index) => id === currentOrder[index]);

        if (isCorrect) {
            $('.correctFeedback').removeClass('hidden');
        } else {
            $('.incorrectFeedback').removeClass('hidden');
            State.variables.score -= 1;
        }

        $('.nextButton').removeClass('hidden');
        $(this).addClass('hidden');
    });

    $('#resetOrder').on('click', function() {
        $('.draggable').appendTo('#draggables');
        updateEmptyStates();
        $('.correctFeedback, .incorrectFeedback, .nextButton').addClass('hidden');
        $('#submitOrder').prop('disabled', true).removeClass('hidden');
    });
}

// Add necessary styles
$(document.head).append(`
    <style>
        .sortable-list {
            min-height: 30px;
        }

        .sortable-ghost {
            opacity: 0.4;
        }

        .sortable-drag {
            opacity: 0.8;
        }

        .sortable-chosen {
            background-color: rgba(127, 164, 188, 0.1);
        }

        /* Improve touch targets on mobile */
        .draggable {
            touch-action: none;
            -webkit-touch-callout: none;
            cursor: move;
            cursor: -webkit-grab;
            margin: 5px 0;
        }

        .draggable:active {
            cursor: -webkit-grabbing;
            cursor: grabbing;
        }

        /* Make sure droppable zones are tall enough for touch */
        .droppable {
            min-height: 44px; /* iOS minimum touch target size */
        }

        @media (hover: none) {
            /* Styles for touch devices */
            .draggable {
                padding: 12px;
            }
        }
    </style>
`);
$(document.head).append("<link rel='icon' href='assets/ERC_whale.png'>");