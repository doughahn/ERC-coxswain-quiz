:: bawra_07 [bawra]

<h2>BAWRA's recommended way to leave the dock is</h2>

The following actions should be taken by the crew, in order:

<<set $actionsList = "Using the sweep only row the stern away from the dock until the boat is perpendicular to the dock.,Put a person on the dock at the bow with the bow line.,Stand all oars and let fall the outboard oars.,Let fall your remaining oars and prepare to backwater.,Board your person from the dock and backwater until you clear.">>
<<set $actionsOrder = "item2,item3,item1,item4,item5">>

<<setupQuestion "5" $actionsList $actionsOrder>>

<div class="incorrectFeedback hidden">
    <h3>Don't mess up undocking at a bawra race!</h3>
    <p>Here's the correct order:</p>
    <ol>
        <li>Put a person on the dock at the bow with the bow line. </li>
        <li>Stand all oars and let fall the outboard oars. </li>
        <li>Using the sweep only, row the stern away from the dock until the boat is perpendicular to the dock.  </li>
        <li>Let fall your remaining oars and prepare to backwater. </li>
        <li>Board your person from the dock and backwater until you clear.</li>
    </ol>
</div>
<div class="nextButton hidden">
    <<if $selectedBawra.length > 0>>
        <<link "Next Question">>
            <<goto $selectedBawra.pop()>>
        <</link>>
    <<else>>
        <<link "Next Chapter">>
            <<goto "Technique_Intro">>
        <</link>>
    <</if>>
</div>

<<script>>
$(document).ready(function() {
    $(".draggable").on("dragstart", function(event) {
        event.originalEvent.dataTransfer.setData("text", event.target.id);
    });

    $(".droppable").on("dragover", function(event) {
        event.preventDefault();
    });

    $(".droppable").on("drop", function(event) {
        event.preventDefault();
        var data = event.originalEvent.dataTransfer.getData("text");
        event.target.appendChild(document.getElementById(data));
        checkIfAllSlotsFilled();
    });

    function checkIfAllSlotsFilled() {
        if ($(".droppable").length === $(".droppable:has(.draggable)").length) {
            $("button#submitOrder").removeAttr("disabled");
        } else {
            $("button#submitOrder").attr("disabled", "disabled");
        }
    }

$("button#submitOrder").click(function() {
    const correctOrder = State.variables.correctOrder; // get the order from a Twine variable

    let isCorrect = true;
    $(".droppable").each(function(index) {
        if (this.firstChild.id !== correctOrder[index]) {
            isCorrect = false;
            return false; // exit the loop early
        }
    });

    if (isCorrect) {
        $(".correctFeedback").text("Correct order!").removeClass("hidden");
        $("button#submitOrder").addClass("hidden");
    } else {
        $(".incorrectFeedback").removeClass("hidden");
        State.variables.score -= 1; 
        $("button#submitOrder").addClass("hidden");
    }
    $(".nextButton").removeClass("hidden");
});


    checkIfAllSlotsFilled(); // Initial check

    $("#resetOrder").click(function() {
        resetOrder();
    });

    function resetOrder() {
        // Move all draggable items back to their original container
        $(".draggable").appendTo("#draggables");

        // Enable the draggables again
        $(".draggable").attr("draggable", true).on("dragstart", function(event) {
            event.originalEvent.dataTransfer.setData("text", event.target.id);
        });
        $(".draggable").removeClass("disabled");

        // Hide feedback and the next button/div
        $(".feedback").addClass("hidden");
        $(".nextButton").addClass("hidden");

        // Disable the submit button again until all slots are filled
        $("button#submitOrder").attr("disabled", "disabled");
    }
});

<</script>>
